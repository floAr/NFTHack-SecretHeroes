{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["IndexPage","data","useStaticQuery","isBrowser","window","useState","keplrReady","setKeplrReady","undefined","account","setAccount","client","setClient","localStorage","getItem","viewingKey","setViewingKey","unityInstance","setUnityInstance","battleHistory","setBattleHistory","battleState","setBattleState","registerUnityInstance","setupKeplr","chainId","a","sleep","ms","Promise","accept","setTimeout","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","setupClient","keplrOfflineSigner","getAccounts","accounts","SigningCosmWasmClient","address","init","amount","denom","gas","exec","scrtClient","execute","msg","response","decoded","TextDecoder","decode","console","log","JSON","parse","getToken","tokenId","queryContractSmart","contracts","nft","queries","privateMetadata","privateData","skills","private_metadata","image","token","id","name","weapons","engineering","biotech","psychics","pollFightState","bullpen","fightStatus","fightState","_battleState","heroes_waiting","your_hero","stringify","SendMessage","pollData","tokens","getAllTokens","scrtAccount","allTokens","tokenIds","token_list","push","length","pollBattleHistory","fightHistory","battle_history","history","setupAccount","getAccount","messages","vKey","setItem","viewing_key","key","error","saveName","getEntropy","mintHeroes","name1","prompt","name2","name3","minter","mint","status","mintedTokens","useEffect","useInterval","SendToBattle","sendNft","result","scrtContracts","scrtExec","scrtPoll","scrtPollBattle","scrtMint","scrtSentToBattle","css","fluid","file","childImageSharp","alt","href","report","map","battle","battle_number"],"mappings":"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","file":"a39c196d-6e497c13fe2de2b4ddfe.js","sourcesContent":["import { css } from '@emotion/core'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport * as React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { SigningCosmWasmClient } from 'secretjs'\r\nimport IndexLayout from '../layouts'\r\nimport Img from 'gatsby-image'\r\n\r\nimport contracts from '../secretReact/contracts'\r\nimport { useInterval } from '../secretReact/useInterval'\r\nimport BattleReportRender from '../components/BattleReport'\r\n\r\nimport UnityFunc from '../components/UnityFunc'\r\nimport BattleStateRender from '../components/BattleState'\r\n\r\nconst chainId = 'holodeck-2'\r\n\r\nconst buildUrl = 'Build'\r\n\r\n\r\n\r\ninterface Token {\r\n  id: string\r\n  name: string\r\n  weapons: number\r\n  engineering: number\r\n  biotech: number\r\n  psychics: number\r\n}\r\n\r\nexport interface BattleResult {\r\n  battle_number: number\r\n  my_hero: string\r\n  my_token_id: string\r\n  my_skills: number[]\r\n  skill_used: number\r\n  winning_skill_value: number\r\n  i_won: boolean\r\n}\r\n\r\n\r\nexport interface BattleState {\r\n  heroes_waiting: number\r\n  your_hero?: Token\r\n}\r\n\r\ninterface PollingData {\r\n  tokens: Token[]\r\n}\r\n\r\nconst IndexPage = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      file(relativePath: { eq: \"secret-heroes.png\" }) {\r\n        childImageSharp {\r\n          # Specify a fixed image and fragment.\r\n          # The default width is 400 pixels\r\n          fixed(width: 150) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  const isBrowser = typeof window !== 'undefined'\r\n\r\n  const [keplrReady, setKeplrReady] = useState<boolean>(false)\r\n  const [account, setAccount] = useState<Account | undefined>(undefined)\r\n  const [client, setClient] = useState<SigningCosmWasmClient | undefined>(undefined)\r\n  const [viewingKey, setViewingKey] = useState<string | null>(isBrowser ? localStorage.getItem('viewingKey') : null)\r\n  const [unityInstance, setUnityInstance] = useState(undefined)\r\n  const [battleHistory, setBattleHistory] = useState<BattleResult[]>([])\r\n  const [battleState, setBattleState] = useState<BattleState | undefined>(undefined)\r\n\r\n  if (isBrowser) window.registerUnityInstance = setUnityInstance\r\n\r\n  //#region Function to connect\r\n  const setupKeplr = async (chainId: string) => {\r\n    // Define sleep\r\n    const sleep = (ms: number) => new Promise(accept => setTimeout(accept, ms))\r\n\r\n    // Wait for Keplr to be injected to the page\r\n    while (!window.keplr && !window.getOfflineSigner && !window.getEnigmaUtils) {\r\n      await sleep(10)\r\n    }\r\n\r\n    await window.keplr.experimentalSuggestChain({\r\n      chainId,\r\n      chainName: 'Secret Testnet',\r\n      rpc: 'http://bootstrap.secrettestnet.io:26657',\r\n      rest: 'https://bootstrap.secrettestnet.io',\r\n      bip44: {\r\n        coinType: 529\r\n      },\r\n      coinType: 529,\r\n      stakeCurrency: {\r\n        coinDenom: 'SCRT',\r\n        coinMinimalDenom: 'uscrt',\r\n        coinDecimals: 6\r\n      },\r\n      bech32Config: {\r\n        bech32PrefixAccAddr: 'secret',\r\n        bech32PrefixAccPub: 'secretpub',\r\n        bech32PrefixValAddr: 'secretvaloper',\r\n        bech32PrefixValPub: 'secretvaloperpub',\r\n        bech32PrefixConsAddr: 'secretvalcons',\r\n        bech32PrefixConsPub: 'secretvalconspub'\r\n      },\r\n      currencies: [\r\n        {\r\n          coinDenom: 'SCRT',\r\n          coinMinimalDenom: 'uscrt',\r\n          coinDecimals: 6\r\n        }\r\n      ],\r\n      feeCurrencies: [\r\n        {\r\n          coinDenom: 'SCRT',\r\n          coinMinimalDenom: 'uscrt',\r\n          coinDecimals: 6\r\n        }\r\n      ],\r\n      gasPriceStep: {\r\n        low: 0.1,\r\n        average: 0.25,\r\n        high: 0.4\r\n      },\r\n      features: ['secretwasm']\r\n    })\r\n\r\n    // Enable Keplr.\r\n    // This pops-up a window for the user to allow keplr access to the webpage.\r\n    await window.keplr.enable(chainId)\r\n    setKeplrReady(true)\r\n  }\r\n\r\n  const setupClient = async () => {\r\n    // Setup SecrtJS with Keplr's OfflineSigner\r\n    // This pops-up a window for the user to sign on each tx we sent\r\n    const keplrOfflineSigner = window.getOfflineSigner(chainId)\r\n    const accounts = await keplrOfflineSigner.getAccounts()\r\n\r\n    const client = new SigningCosmWasmClient(\r\n      'https://bootstrap.secrettestnet.io', // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\r\n      accounts[0].address,\r\n      keplrOfflineSigner,\r\n      window.getEnigmaUtils(chainId),\r\n      {\r\n        // 300k - Max gas units we're willing to use for init\r\n        init: {\r\n          amount: [{ amount: '300000', denom: 'uscrt' }],\r\n          gas: '300000'\r\n        },\r\n        // 300k - Max gas units we're willing to use for exec\r\n        exec: {\r\n          amount: [{ amount: '980000', denom: 'uscrt' }],\r\n          gas: '980000'\r\n        }\r\n      }\r\n    )\r\n    if (isBrowser) window.scrtClient = client\r\n    setClient(client)\r\n  }\r\n\r\n  // const query = async (address: string, msg: any) => {\r\n  //   const response = await client?.queryContractSmart(address, msg)\r\n  //   console.log(response)\r\n  //   const decoded = new TextDecoder().decode(response.data)\r\n  //   console.log('query: ', decoded)\r\n  //   return JSON.parse(decoded)\r\n  // }\r\n\r\n  const execute = async (address: string, msg: any) => {\r\n    const response = await client?.execute(address, msg)\r\n    const decoded = new TextDecoder().decode(response?.data)\r\n    console.log('exec: ', decoded)\r\n    return JSON.parse(decoded)\r\n  }\r\n\r\n  const getToken = async (tokenId: string) => {\r\n    const privateData = await client?.queryContractSmart(\r\n      contracts.nft.address,\r\n      contracts.nft.queries.privateMetadata(tokenId, account.address)\r\n    )\r\n    const skills: number[] = JSON.parse(privateData.private_metadata.image)\r\n    const token: Token = {\r\n      id: tokenId,\r\n      name: privateData.private_metadata.name,\r\n      weapons: skills[0],\r\n      engineering: skills[1],\r\n      biotech: skills[2],\r\n      psychics: skills[3]\r\n    }\r\n    return token\r\n  }\r\n\r\n  const pollFightState = async () => {\r\n    const fightState = await client?.queryContractSmart(contracts.bullpen.address, contracts.bullpen.queries.fightStatus(account.address))\r\n    // eslint-disable-next-line @typescript-eslint/camelcase\r\n    const _battleState: BattleState = { heroes_waiting: fightState.bullpen.heroes_waiting, your_hero: null }\r\n    if (fightState.bullpen.your_hero !== null) {\r\n\r\n      // eslint-disable-next-line @typescript-eslint/camelcase\r\n      _battleState.your_hero = {\r\n        id: fightState.bullpen.your_hero.name,\r\n        name: fightState.bullpen.your_hero.name,\r\n        weapons: fightState.bullpen.your_hero.skills[0],\r\n        engineering: fightState.bullpen.your_hero.skills[1],\r\n        biotech: fightState.bullpen.your_hero.skills[2],\r\n        psychics: fightState.bullpen.your_hero.skills[3]\r\n      }\r\n      if (JSON.stringify(_battleState) !== JSON.stringify(battleState)) {\r\n        if (unityInstance !== undefined) {\r\n          unityInstance.SendMessage('WebGlBridge', 'ReportBattleStatus', JSON.stringify(_battleState))\r\n          setBattleState(_battleState)\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  const pollData = async () => {\r\n    const tokens: Token[] = []\r\n    const allTokens = await client?.queryContractSmart(\r\n      contracts.nft.address,\r\n      contracts.nft.queries.getAllTokens(window.scrtAccount.address)\r\n    )\r\n    const tokenIds: string[] = allTokens.token_list.tokens\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const tokenId of tokenIds) {\r\n      // eslint-disable-next-line no-await-in-loop\r\n      tokens.push(await getToken(tokenId))\r\n    }\r\n    if (unityInstance !== undefined && tokens.length > 0) {\r\n      unityInstance.SendMessage('WebGlBridge', 'ReportTokens', JSON.stringify(tokens))\r\n    }\r\n  }\r\n\r\n  const pollBattleHistory = async () => {\r\n    const tokens: Token[] = []\r\n    const battleHistory = await client?.queryContractSmart(\r\n      contracts.bullpen.address,\r\n      contracts.bullpen.queries.fightHistory(account.address)\r\n    )\r\n    console.log(battleHistory)\r\n    if (JSON.stringify(battleHistory) !== JSON.stringify(battleHistory.battle_history.history))\r\n      setBattleHistory(battleHistory.battle_history.history as BattleResult[])\r\n  }\r\n\r\n  const returnFigher = async () => {\r\n    await client?.execute(contracts.bullpen.address, contracts.bullpen.messages.returnFigher())\r\n  }\r\n\r\n  const setupAccount = async () => {\r\n    const scrtAccount = await client?.getAccount(account?.address)\r\n    if (viewingKey === undefined || viewingKey === null) {\r\n      const vKey = await execute(contracts.bullpen.address, contracts.bullpen.messages.setViewingKey())\r\n      await execute(contracts.nft.address, contracts.nft.messages.setViewingKey())\r\n      try {\r\n        localStorage.setItem('viewingKey', vKey.viewing_key.key)\r\n        setViewingKey(vKey.viewing_key.key)\r\n      } catch (error) { }\r\n    }\r\n\r\n    setAccount(scrtAccount)\r\n  }\r\n\r\n  const saveName = (name: string | null | undefined) => {\r\n    if (name === undefined || name === null || name.length === 0) return contracts.getEntropy()\r\n    return name\r\n  }\r\n\r\n  const registerMinting = (tokens: Token[]) => {\r\n    if (unityInstance !== undefined) {\r\n      unityInstance.SendMessage('WebGlBridge', 'RegisterMint', JSON.stringify(tokens))\r\n    }\r\n  }\r\n\r\n  const mintHeroes = async () => {\r\n    const name1 = saveName(prompt('Enter the name of your first hero'))\r\n    const name2 = saveName(prompt('Enter the name of your second hero'))\r\n    const name3 = saveName(prompt('Enter the name of your third hero'))\r\n\r\n    const mintResult = await execute(contracts.minter.address, contracts.minter.messages.mint(name1, name2, name3))\r\n    if (mintResult.status.status === 'Success') {\r\n      const mintedTokens = []\r\n      mintedTokens.push(await getToken(name1))\r\n      mintedTokens.push(await getToken(name2))\r\n      mintedTokens.push(await getToken(name3))\r\n      registerMinting(mintedTokens)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setupKeplr(chainId)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (keplrReady) {\r\n      setupClient()\r\n    }\r\n  }, [keplrReady])\r\n\r\n  useEffect(() => {\r\n    if (client) {\r\n      setupAccount()\r\n    }\r\n  }, [client])\r\n\r\n  useEffect(() => {\r\n    console.log('trying unlock - account: ' + account + ' & unityInstace: ' + unityInstance)\r\n    if (account && unityInstance) {\r\n      unityInstance.SendMessage('WebGlBridge', 'Connect')\r\n    }\r\n  }, [account, unityInstance])\r\n\r\n  useInterval(async () => {\r\n    if (account) {\r\n      await pollData()\r\n      await pollFightState()\r\n      await pollBattleHistory()\r\n    }\r\n  }, 15000)\r\n\r\n  //#endregion\r\n\r\n  const SendToBattle = async (tokenId: string) => {\r\n    try {\r\n      const result = await execute(contracts.nft.address, contracts.nft.messages.sendNft(tokenId))\r\n      console.log(result)\r\n    } catch (e) {\r\n      console.log(e)\r\n      console.log('error')\r\n    }\r\n  }\r\n\r\n  if (isBrowser) {\r\n    window.scrtContracts = contracts\r\n    window.scrtAccount = account\r\n\r\n    // window.scrtQuery = query\r\n    window.scrtExec = execute\r\n\r\n    window.scrtPoll = pollData\r\n    window.scrtPollBattle = pollFightState\r\n    window.scrtMint = mintHeroes\r\n    window.scrtSentToBattle = SendToBattle\r\n  }\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <div\r\n        css={css`\r\n          display: grid;\r\n          grid-template-columns: 0.3fr 3fr 2fr 1fr;\r\n          grid-template-rows: 0.3fr 3fr;\r\n          grid-column-gap: 5px;\r\n          grid-row-gap: 5px;\r\n          place-items: center;\r\n          height: 100%;\r\n\r\n          align-content: stretch;\r\n        `}\r\n      >\r\n\r\n        <Img\r\n          css={css`\r\n              grid-area: 1 / 3 / 2 / 4;\r\n              background-image: './images/secret-heroes.png';\r\n              width: 100%;\r\n              height: 100%;\r\n            `}\r\n          fluid={data.file.childImageSharp.fluid}\r\n          alt=\"Secret Heroes\"\r\n        />\r\n\r\n\r\n        <div\r\n          css={css`\r\n            grid-area: 1 / 2 / 2 / 3;\r\n            align-content: center;\r\n            align-items: center;\r\n            vertical-align: middle;\r\n            width: 100%;\r\n            font-weight: bold;\r\n            padding:  2vw;\r\n            border-radius: 10px;\r\n            background: rgb(245, 245, 245);\r\n            backdrop-filter: blur(10px);\r\n            box-shadow: -0.25rem -0.25rem 0.5rem rgba(255, 255, 255, 0.07), 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.12), -0.75rem -0.75rem 1.75rem rgba(255, 255, 255, 0.07), 0.75rem 0.75rem 1.75rem rgba(0, 0, 0, 0.12), inset 8rem 8rem 8rem rgba(0, 0, 0, 0.05), inset -8rem -8rem 8rem rgba(255, 255, 255, 0.05);\r\n            display: flex;\r\n            justify-content: space-between`}\r\n        >\r\n          {account === undefined ? (\r\n            <h4\r\n              css={css`\r\n                margin-left: 15px;\r\n              `}\r\n            >\r\n              Connecting - you need the <a href={'https://wallet.keplr.app/'}> Keplr Wallet</a> to interact with the game\r\n            </h4>\r\n          ) : (\r\n            <h4\r\n              css={css`\r\n                margin-left: 15px;\r\n              `}\r\n            >\r\n              Connected as {account.address}\r\n            </h4>\r\n          )}\r\n          <div css={css`display:flex;flex-direction:row: align-items:center`}>\r\n            <h4 css={css`padding:15px`}>Currently waiting to fight:</h4>\r\n            {battleState && <BattleStateRender report={battleState} />}\r\n            {battleState === undefined && <h4>-</h4>}\r\n          </div>\r\n        </div>\r\n        <div\r\n          css={css`\r\n            grid-area: 2 / 2 / 3 / 3;\r\n            height: 100%;\r\n            width: 100%;\r\n            padding: 5vh 5vw;\r\n            border-radius: 10px;\r\n            background: rgb(245, 245, 245);\r\n            backdrop-filter: blur(10px);\r\n            box-shadow: -0.25rem -0.25rem 0.5rem rgba(255, 255, 255, 0.07), 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.12), -0.75rem -0.75rem 1.75rem rgba(255, 255, 255, 0.07), 0.75rem 0.75rem 1.75rem rgba(0, 0, 0, 0.12), inset 8rem 8rem 8rem rgba(0, 0, 0, 0.05), inset -8rem -8rem 8rem rgba(255, 255, 255, 0.05);\r\n\r\n          `}\r\n        >\r\n          <UnityFunc />\r\n        </div>\r\n        <div\r\n          css={css`\r\n            grid-area: 2 / 3 / 3 / 4;\r\n            /* background-color: #0f8824; */\r\n            width: 100%;\r\n            height: 100%;\r\n            align-self: flex-start;\r\n            padding: 5vh 5vw;\r\n            border-radius: 10px;\r\n            background: rgb(245, 245, 245);\r\n            backdrop-filter: blur(10px);\r\n            box-shadow: -0.25rem -0.25rem 0.5rem rgba(255, 255, 255, 0.07), 0.25rem 0.25rem 0.5rem rgba(0, 0, 0, 0.12), -0.75rem -0.75rem 1.75rem rgba(255, 255, 255, 0.07), 0.75rem 0.75rem 1.75rem rgba(0, 0, 0, 0.12), inset 8rem 8rem 8rem rgba(0, 0, 0, 0.05), inset -8rem -8rem 8rem rgba(255, 255, 255, 0.05);\r\n\r\n          `}\r\n        >\r\n          <h4>Battle Results</h4>\r\n          {battleHistory.length === 0 ? (\"No battles yet\") : (\r\n            <ul>\r\n              {battleHistory.map(battle => {\r\n                return (\r\n                  <li\r\n                    css={css`\r\n                    width: 100%;\r\n                  `}\r\n                    key={battle.battle_number}\r\n                  >\r\n                    <BattleReportRender report={battle} />{' '}\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>)}\r\n        </div>\r\n      </div>\r\n    </IndexLayout>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n"],"sourceRoot":""}